
/******************* versiones de tls que se pueden configurar   *******************\.
https://www.postgresql.org/docs/12/runtime-config-connection.html 
https://www.enterprisedb.com/blog/setting-ssltls-protocol-versions-postgresql-12

Versión de PostgreSQL	Valores Posibles para ssl_min_protocol_version , El valor predeterminado es TLSv1
10	No disponible
11	No disponible -- si puedes activar el tls pero no usa 
12	TLSv1.0, TLSv1.1, TLSv1.2, TLSv1.3
13	TLSv1.0, TLSv1.1, TLSv1.2, TLSv1.3
14	TLSv1.0, TLSv1.1, TLSv1.2, TLSv1.3
15	TLSv1.0, TLSv1.1, TLSv1.2, TLSv1.3
16	TLSv1.0, TLSv1.1, TLSv1.2, TLSv1.3
17	TLSv1.0, TLSv1.1, TLSv1.2, TLSv1.3



ssl_min_protocol_version 
## versiones compatibles de TLS para diferentes versiones de PostgreSQL ( El valor predeterminado es TLSv1):
PostgreSQL 8.x: Soporta TLS 1.0.
PostgreSQL 9.x: Soporta TLS 1.0 y TLS 1.1.
PostgreSQL 10.x: Soporta TLS 1.0, TLS 1.1 .
PostgreSQL 11.x: Soporta TLS 1.0, TLS 1.1.
PostgreSQL 12.x: Soporta TLS 1.0, TLS 1.1, TLS 1.2 y TLS 1.3.
PostgreSQL 13.x: Soporta TLS 1.0, TLS 1.1, TLS 1.2 y TLS 1.3.
PostgreSQL 14.x: Soporta TLS 1.0, TLS 1.1, TLS 1.2 y TLS 1.3.
PostgreSQL 15.x: Soporta TLS 1.0, TLS 1.1, TLS 1.2 y TLS 1.3.
PostgreSQL 16.x: Soporta TLS 1.0, TLS 1.1, TLS 1.2 y TLS 1.3.
PostgreSQL 17.x: Soporta TLS 1.0, TLS 1.1, TLS 1.2 y TLS 1.3.




####################################################################################################
########################    Pasos para implementar TLS en PSQL   ###################################
####################################################################################################


####################  Paso 1: Generar un archivo de autoridad de certificación (CA)  #################### 



1.- Generación del certificado raíz (CA): 

  	1.1 Genera un certificado autofirmado para la autoridad de certificación (CA) -  
  	Este certificado es utilizado para firmar digitalmente otros certificados, incluidos los certificados de servidor y de cliente.
  	
  	openssl req -new -x509   -nodes -out root.crt -keyout root.key -subj "/CN=CA Root"
  	
  	----- segunda opcion/ aqui tu generas una paswd para el root ---
  	
  	 openssl genrsa -aes128  -out root.key 2048 -- Genera una clave privada para tu CA | . Si no generas una clave privada   La clave privada es esencial para la firma de certificados,
  	 openssl rsa -in root.key -out root.key
  	 chmod 400 root.key
  	 openssl req -new -x509 -key root.key -out root.crt -subj '/CN=CA Root' --- Crea un certificado autofirmado para tu CA:
  	--------------------
  	
  
2.- Generación del certificado del servidor:
  
  	2.1  Genera una solicitud de certificado para el servidor con una clave privada
  	openssl req -new -nodes -out server.csr -keyout server.key \
      -subj "/C=US/ST=California/L=Los Angeles/O=Mi Organización/OU=Mi Unidad/CN=127.0.0.1"
  	
  	2.2 Firma la solicitud de certificado del servidor con el certificado raíz y su clave privada.
  	openssl x509 -req   -in server.csr -CA root.crt -CAkey root.key -CAcreateserial -out server.crt 
  
  
  
3.- Generación del certificado del cliente: 
  
  	3.1 - Genera una solicitud de certificado para el cliente con una clave privada 
  	openssl req -new -nodes -out client.csr -keyout client.key -subj "/CN=sys_user_test"
  
  	3.2 - Firma la solicitud de certificado del cliente con el certificado raíz y su clave privada.
  	openssl x509 -req   -in client.csr -CA root.crt -CAkey root.key -CAcreateserial -out client.crt
  
  
4.- Eliminar los archivos que no se ocupan 
    rm *.csr
    rm *.srl
  
5.- dar permisos de lectura 
    chmod 400 *.{key,crt}
  
  
6.- Validar que los certificados funcionen correctamente 
   openssl verify -CAfile root.crt client.crt
   openssl verify -CAfile root.crt server.crt
  
  [NOTA] si todo esta bien retorna esto "server.crt: OK" o "client.crt: OK"






####################   Paso 2: Configurar los parámetros en postgresql.conf #################### 

1.- Editar los  parametros  vim  postgresql.conf : 

ssl: Este parámetro determina si se habilita o no la capa de sockets seguros (SSL).
ssl_ca_file: Especifica la ubicación del archivo de autoridad de certificación (CA) que se utilizará para verificar los certificados SSL presentados por los clientes.
ssl_cert_file: Especifica la ubicación del archivo de certificado del servidor PostgreSQL. Este certificado se presenta a los clientes durante el proceso de autenticación SSL.
ssl_crl_file: Especifica la ubicación del archivo de lista de revocación de certificados (CRL), si se utiliza, para verificar si los certificados SSL presentados por los clientes han sido revocados.
ssl_key_file: Especifica la ubicación del archivo de clave privada del servidor PostgreSQL. Esta clave se utiliza para el intercambio de claves durante el proceso de autenticación SSL.
ssl_min_protocol_version: Especifica la versión mínima del protocolo SSL/TLS que se aceptará para la comunicación segura.
ssl_max_protocol_version: Especifica la versión máxima del protocolo SSL/TLS que se aceptará para la comunicación segura.
ssl_prefer_server_ciphers = on: El servidor elige el cifrador preferido1 . Esto es útil si deseas que el servidor tenga control sobre la selección de cifradores para mejorar la seguridad.
ssl_prefer_server_ciphers = off: El cliente elige el cifrador preferido1 . Esto puede ser útil si deseas que el cliente tenga control sobre la selección de cifradores, por ejemplo, para cumplir con requisitos específicos de seguridad del cliente


listen_addresses = '*'
ssl = on
ssl_cert_file = 'server.crt'
ssl_key_file = 'server.key'
ssl_ca_file = 'root.crt'
ssl_min_protocol_version = 'TLSv1.3'
ssl_ciphers = 'HIGH:MEDIUM:+3DES:!aNULL' # allowed SSL ciphers
ssl_prefer_server_ciphers = on







####################   Paso 3: Configurar los parámetros en pg_hba.conf ####################  

1.- Editar el vim pg_hba.conf :

# TYPE  DATABASE        USER            ADDRESS                 METHOD
hostssl   all         sys_user_test             all                      cert
hostssl    all        sys_user_test           0.0.0.0 0.0.0.0         scram-sha-256 

hostssl    all    sys_user_test    0.0.0.0 0.0.0.0     cert    clientcert=1
 





