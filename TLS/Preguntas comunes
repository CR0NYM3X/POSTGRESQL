 
 

Problema: Tengo varios archivos con extensi√≥n crt,key y no se cual es el root, el intermediario y la llave no se a quien corresponde , se puede indentificar? 


üëâ **Nota:** El root CA casi nunca comparte su clave privada (`.key`) 


Para identificar los certificados y la clave privada, sigue estos pasos:

1. **Identificar el Certificado Ra√≠z (Root CA):**
	- El certificado ra√≠z es **auto-firmado (self-signed)**  
	- Si `Issuer` y `Subject` son iguales, es el **certificado ra√≠z**.
	- Ejecuta este comando para cada `.crt`:
     **comando:**  openssl x509 -in root.crt -text -noout | grep -E "Issuer:|Subject:"
	 
	 
2. **Identificar el Certificado Intermedio (si existe):**
   - Es un CA intermedio firmado por el root CA pero no es auto-firmado.
   - Su `Subject` ser√° diferente del root, y su `Issuer` coincidir√° con el `Subject` del root CA.
   - Tiene la extensi√≥n **CA:TRUE**:
   **comando:** openssl x509 -in intermediate_ca.crt -text -noout | grep -E "Issuer:|Subject:"
   **comando:** openssl x509 -in intermediate_ca.crt -text -noout | grep "CA:TRUE"
   


3. **Identificar el Certificado del Servidor:**
	- El certificado del servidor es el que **no es auto-firmado** y generalmente tiene `CN` igual al dominio del servidor (e.g., `example.com`).
	- Verifica si su `Issuer` coincide con el `Subject` de otro certificado (el *intermediate.crt* el root.crt, si existe).
	- Busca la extensi√≥n **X509v3 Extended Key Usage**:
     **comando:** openssl x509 -in servidor.crt -text -noout | grep -Ei "TLS Web|Issuer|Subject"



4. **Verificar la clave privada (.key):**
   - La clave privada debe coincidir con el **certificado del servidor** (no con el root).
   - Compara el m√≥dulo p√∫blico de la clave y el certificado:
     ``` 
		 openssl rsa -in servidor.key -modulus -noout | openssl sha256 # Obtener hash del m√≥dulo de la clave privada

		 openssl x509 -in servidor.crt -modulus -noout | openssl sha256 # Obtener hash del m√≥dulo de cada certificado (.crt)
     ```
     Si los hashes coinciden, el `.key` pertenece al certificado del servidor.
	 
	 
5.-**verificar la cadena de un certificado emitido por una solicitud CSR:**
		**comando:** openssl verify -CAfile root.crt -untrusted intermediate.crt servidor.crt # Salida esperada:: server.crt: OK
		
	 
6.- **Verificar la fecha de expiraci√≥n de un certificado**
	openssl x509 -in servidor.crt -noout -enddate  #  Salida esperada: `notAfter=Dec 31 23:59:59 2025 GMT`
	openssl x509 -in certificado.crt -noout -dates  #  Salida esperada:   notBefore=Fecha y hora de inicio  , notAfter=Fecha y hora de expiraci√≥n
	
7.- 6.- **Verificar la fecha de expiraci√≥n de un certificado Servidor remoto**
	openssl s_client -connect dominio.com:443 -servername dominio.com 2>/dev/null | openssl x509 -noout -dates 
	openssl s_client -connect 192.168.1.100:5416 -starttls postgres 2>/dev/null | openssl x509 -noout -dates 





# Preguntas frecuentes: 	 

¬øPor qu√© el archivo `.key` no es del certificado ra√≠z?
	La clave privada (`.key`) del **certificado ra√≠z** (Root CA) es un secreto cr√≠tico y **nunca se comparte** en entornos seguros.  
	Si tienes un `.key`, lo m√°s probable es que pertenezca al certificado del servidor, porque:
	   - El **certificado ra√≠z** solo se usa para firmar otros certificados (intermedios o servidores), y su clave privada se guarda offline (en una m√°quina desconectada de internet).
	   - El **certificado del servidor** (generado desde un CSR) s√≠ necesita su clave privada asociada para funcionar (e.g., en Apache/Nginx), por eso el `.key` suele estar presente.


¬øQu√© significa "auto-firmado" (self-signed)?


	- **Auto-firmado (self-signed):**  
		Es un certificado donde el **emisor (Issuer)** y el **sujeto (Subject)** son el mismo. 
		Ejemplo:
		```
			Issuer: C=US, O=Mi Root CA, CN=Mi Root CA
			Subject: C=US, O=Mi Root CA, CN=Mi Root CA
		```
		el certificado se firma a s√≠ mismo (no hay una entidad superior que lo valide).Solo el certificado ra√≠z es auto-firmado.

	- **No auto-firmado:**  
		El certificado es emitido por una entidad superior (como un Root CA o CA intermedio).  
		Ejemplo:
		```
			Issuer: C=US, O=Mi Root CA, CN=Mi Root CA # Emisor = Root CA
			Subject: C=US, O=Mi Servidor, CN=servidor.com # Sujeto = Servidor
		```
		Este certificado fue firmado por el Root CA (no es auto-firmado).


¬øQu√© es un Certificado Intermedio?
El certificado intermedio (Intermediate CA) es una capa de seguridad entre el Root CA y el certificado del servidor. Su funci√≥n es:

	Proteger el Root CA:  Si el certificado intermedio se compromete, el Root CA sigue seguro (no se expone su clave privada). 
	Jerarqu√≠a de confianza: Root CA ‚ûî Firma al Intermediate CA ‚ûî Intermediate CA firma al servidor.
	Flexibilidad:  Permite revocar intermediarios sin afectar al Root CA.
	



¬øPor qu√© los clientes se conectan con certificados vencidos?
	- **Comportamiento predeterminado:** PostgreSQL no verifica la fecha de expiraci√≥n de los certificados SSL/TLS del lado del servidor o del cliente, a menos que se configuren par√°metros espec√≠ficos.
	- **Tu escenario:**  
	  - El certificado (`server.crt`) est√° vencido (las fechas `notBefore` y `notAfter` est√°n fuera del rango actual).  
	  - Los clientes se conectan usando SSL (como muestra `pg_stat_ssl`), pero **PostgreSQL no est√° validando la expiraci√≥n del certificado**.



¬øQu√© es `Extended Key Usage` (EKU)?
	- Es una extensi√≥n opcional en un certificado X.509.
	- Define los **usos permitidos** del certificado, como autenticaci√≥n de servidor, autenticaci√≥n de cliente, firma de c√≥digo, etc.
	- Si no est√° presente, el certificado puede usarse para **cualquier prop√≥sito** (dependiendo de la pol√≠tica de la CA).
	- Limita el uso del certificado a operaciones espec√≠ficas

	**Valores Comunes de `Extended Key Usage`**
		 **`serverAuth`**  El certificado puede usarse para autenticar un servidor (ej: HTTPS, PostgreSQL). 
		 **`clientAuth`**  El certificado puede usarse para autenticar un cliente (ej: aplicaciones que se conectan a PostgreSQL). 
		 **`codeSigning`**  El certificado puede usarse para firmar c√≥digo (ej: aplicaciones, scripts). 
		 **`emailProtection`**  El certificado puede usarse para firmar o cifrar correos electr√≥nicos. 
		 **`timeStamping`**  El certificado puede usarse para firmar marcas de tiempo. 
		 **`OCSPSigning`**  El certificado puede usarse para firmar respuestas OCSP (revocaci√≥n de certificados). 
	 
	 
		**comando** openssl x509 -in certificado.crt -text -noout
		
		**Salida esperada:**
			X509v3 Extended Key Usage:
				TLS Web Server Authentication, TLS Web Client Authentication

			
			- **`TLS Web Server Authentication`**: Equivale a `serverAuth`.
			- **`TLS Web Client Authentication`**: Equivale a `clientAuth`.


 

### **Consejo de Seguridad**
Si el `.key` que tienes coincide con el certificado ra√≠z, **¬°ten mucho cuidado!** La clave privada del Root CA debe estar protegida y no exponerse en servidores. Si la pierdes o comprometes, toda tu infraestructura de certificados quedar√° en riesgo.

 
 
