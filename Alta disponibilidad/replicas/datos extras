

################################### CONFIGURACION DE SERVIDOR MAESTRO  ###################################

touch ~/.pgpass
chmod 0600 ~/.pgpass


mkdir /tmp/archive_wal
chown -R postgres:postgres /tmp/archive_wal
chmod 777 /tmp/archive_wal



 # contraseña 123132
 createuser --replication -P -e sysreplica -p 5416   
 
 CREATE SUBSCRIPTION 
https://stackoverflow.com/questions/76274208/postgresql-logical-replication-hangs-on-create-subscription



/******** CONF POSTGRESQL.CONF **********\


 -> Crea un archivo llamado recovery.conf en la carpeta de datos de la réplica con el siguiente contenido:


listen_addresses = '*'
max_replication_slots = 10

max_standby_archive_delay -1 
max_standby_streaming_delay: -1  --> DESACTIVA ESTA OPCIÓN   Determina la cantidad máxima de tiempo que puede pasar antes de que la réplica comience a procesar los cambios entrantes después de que se hayan enviado desde  el servidor principal. Este parámetro se especifica en segundos.

wal_log_hints = on
wal_level = replica
max_wal_size = 1GB
min_wal_size = 80MB
max_wal_senders =  5 
wal_keep_segments =  32 
wal_keep_size = 1000  --->wal_keep_segments  POR EJEMPLO: 16mb por archivo, en 1GB son 64 Archivos <-- para guardar 80GB es un total de 5120 archivos

hot_standby = off  # Si esto esta en off no te permite hacer el promote (pg_ctl: cannot promote server; server is not in standby mode)
 


archive_mode = on
archive_timeout = 0
archive_command = 'cp %p /path/to/archive/%f' ---- En esta configuración, %p se reemplaza con la ruta completa del archivo de registro de transacciones WAL y %f con el nombre de archivo. El comando cp copiará el archivo de registro a la carpeta especificada como /path/to/archive/


 
--  replicación sincrónica 
synchronous_commit = on		# synchronization level; # off, local, remote_write, remote_apply, or on
synchronous_standby_names = '*' # tiene problemas ya que si se cae el servidor secundario tarda en hacer las cosas en el servidor principal



#Recargamos los cambios realizados
pg_ctl reload
 
SELECT * FROM pg_create_physical_replication_slot('repl_slot');` --> Para habilitar la replicación física, se utiliza una característica llamada "replication slots" (ranuras de replicación), que permiten que el servidor principal mantenga un registro de los cambios necesarios para replicar. 

 SELECT pg_drop_replication_slot('pgstandby1');



**********  pg_hba.conf 

host    replication     sysreplica             10.28.230.123/32            scram-sha-256

pg_ctl reload -D $PGDATA16

 



################################### CONFIGURACION DE SERVIDOR ESCLAVO  ###################################



# Ejecutar pg_basebackup en segundo plano usando un archivo de salida /home/postgres/nohup.out

nohup  pg_basebackup -U postgres -h 10.28.230.123 -R -P -X stream -c fast -D /tmp/data16-replica/ &

# Esperar a que el proceso de pg_basebackup termine
pg_basebackup_pid=$(ps -ef | grep postgres | grep pg_basebackup | grep -v grep | awk '{print $2}')
while kill -0 "$pg_basebackup_pid" 2>/dev/null; do
    sleep 60
done



chmod 700 /sysx/data/

#Iniciar la base de datos
pg_ctl start -D /sysx/data/ -o -i


cd
tail -f  nohup.out


sed -i 's/hot_standby = off/hot_standby = on/g' /sysx/data/postgresql.conf



recovery.conf  o en el postgresql.auto.conf
 

recovery_target_timeline = 'latest'
primary_conninfo = 'host=172.31.14.134 port=5432 user=replica password=passwd application_name=pgslave1'
restore_command = 'cp /var/lib/postgresql/12/main/archive/%f %p'
primary_slot_name = 'my_replication_slot'


trigger_file = '/var/pgsql/data/pg_failover_trigger'

 
ls -lhtra | grep standby.signal


------ En caso de interrupcion -----------

#Promover servidor
pg_ctl promote  -D  /tmp/data16-replica

#Cambiar hot_standby a off en postgresql.conf
sed -i 's/hot_standby = off/hot_standby = on/g' /sysx/data/postgresql.conf


################################### CONCEPTOS ###################################

Un replication slot es una característica de PostgreSQL que asegura que el servidor principal mantenga los registros de transacciones (WAL) requeridos por las réplicas, incluso cuando estas están desconectadas del maestro.si la réplica se desconecta, el servidor principal puede seguir el retraso de la réplica y preservar los archivos WAL necesarios hasta que la réplica se reconecte. Luego, los archivos WAL se decodifican y aplican en la réplica



Replicación sincrónica
El servidor principal espera una respuesta del servidor en espera antes de completar un proceso. Por lo tanto, el tiempo de respuesta general incluye el tiempo de envío de registros. Dado que no hay demora en el envío de WAL al servidor en espera, se mejora la actualización de los datos (fiabilidad) del servidor en espera. Adecuado para operaciones de conmutación por error y equilibrio de carga de solo lectura.

Replicación asincrónica
El servidor principal completa un proceso sin esperar una respuesta del servidor en espera. Por lo tanto, el tiempo de respuesta general es aproximadamente el mismo que cuando no se utiliza la replicación de transmisión. Dado que el envío de WAL y su aplicación (actualización de datos) en el servidor en espera se realizan de forma asincrónica, es posible que el resultado actualizado en el servidor principal no esté disponible de inmediato en el servidor en espera.



la replicación en tiempo real, que permite el movimiento en tiempo real de datos actualizados desde el servidor principal al servidor en espera, manteniendo las bases de datos de ambos servidores actualizadas. Su sistema se beneficiará enormemente de las funciones de replicación en tiempo real 

El failover: en la replicación de streaming de PostgreSQL es un proceso que permite que un servidor secundario (también conocido como réplica) tome el control automáticamente cuando el servidor principal (también llamado primario) falla o se detiene.

 

¿Qué son las slots/ranuras de replicación?
Una ranura de replicación es una característica de PostgreSQL que garantiza que el servidor maestro conserve los registros WAL requeridos por las réplicas incluso cuando están desconectadas del maestro.

Cuando se utiliza la replicación de streaming entre un maestro y algunos servidores de reserva activos o de archivo, se necesita una ranura de replicación para mantener activos los archivos WAL incluso cuando la réplica está fuera de línea o desconectada.

Si el servidor de reserva deja de funcionar, el maestro puede controlar el retraso del servidor de reserva y conservar los archivos WAL que necesita hasta que el servidor de reserva se vuelva a conectar. Luego, los archivos WAL se decodifican y se reproducen en el duplicado.







/************* parametros de postgresql.conf *************\



archive_mode: Habilita el envío de registros WAL a un archivo de respaldo externo.
archive_command: Define cómo y dónde almacenar los registros WAL fuera del servidor.
restore_command: Define cómo el servidor esclavo recupera registros WAL faltantes para mantener la replicación.

wal_log_hints: Este parámetro es requerido para que el servicio pg_rewind sea capaz de sincronizar con el servidor primario.
wal_level: Establece el nivel de registro WAL necesario  y se utiliza este parámetro para habilitar la réplica streaming. Los posibles valores son “minimal”, “logical” o “replica”.
max_wal_size: Es usado para especificar el tamaño máximo del archivo WAL.
hot_standby:  el modo de hot standby permite conexiones de solo lectura en un servidor de espera mientras se recupera de un estado de archivo o se replica desde el servidor principal. Esto es útil para tareas de replicación y restauración precisa de copias de seguridad. OFF =PRINCIPAL  ON  =SOPORTE
  
max_wal_sender: especifica el número máximo con los servidores en espera.

    • max_wal_senders: Define el número máximo de conexiones que el servidor principal puede aceptar desde réplicas.
    • wal_keep_segments: Determina cuántos segmentos WAL se deben mantener o conservar disponibles para permitir la recuperación de réplicas.
	• hot_standby: Habilita el modo de réplica en caliente, permitiendo consultas de solo lectura en la réplica.
    • primary_conninfo: Especifica cómo la réplica se conectará al servidor principal.
    • recovery_target_timeline: Configura la réplica para seguir la línea de tiempo más reciente para la recuperación.
    • trigger_file: Define la ubicación de un archivo que, cuando se crea, detiene la recuperación y permite que la réplica funcione como servidor principal. definimos la ruta en la que se creará el fichero del trigger standby.
	
standby_mode activa el modo standby en nuestro servidor standby.  modo de solo-lectura a todos los datos disponibles en el servidor esclavo 


Pgpass:  es un archivo bastante útil que nos evitará la tarea de escribir el password para la conexión a una base de datos POSTGRESQL durante las labores de backup.


max_replication_slots: Si este parámetro se establece en 0, no se habilitarán las ranuras de replicación. Debe especificar una ranura distinta de 0 (predeterminada) si está utilizando versiones de PostgreSQL anteriores a la 10 y 10 para PostgreSQL 10. Esta variable indica cuántas ranuras de replicación están permitidas. El servidor no se iniciará si establece la variable en un valor menor que la cantidad total de ranuras de replicación disponibles.
wal_level: Debe ser una réplica o superior (una réplica es el valor predeterminado). La configuración hot_standby o el archivo se asignarán a una réplica. Una réplica es suficiente para una ranura de replicación física. Se recomiendan ranuras de replicación lógicas.
max_wal_senders: Se establece en 10 de forma predeterminada; 0 en la versión 9.6 indica que la replicación está deshabilitada. Se recomienda establecerlo en al menos 16.
hot_standby: Debe estar habilitado en versiones anteriores a la 10, ya que está deshabilitado de manera predeterminada. Esto es fundamental para los nodos en espera porque, cuando está habilitado, puede conectarse y ejecutar consultas durante el modo de recuperación o en espera.
primary_slot_name:  Esta variable se configura en recovery.confel nodo de reserva. Esta es la ranura que el receptor o el nodo de reserva utilizarán al conectarse al transmisor (o principal)





Ranuras de replicación física de PostgreSQL
Los cambios que se producen en el servidor principal mediante la replicación de streaming se registran en los segmentos WAL. Estos archivos WAL se envían al servidor en espera y luego se reproducen.

De esta manera, se puede crear una ranura de replicación física en el servidor principal y se almacena la ubicación hasta donde se han enviado las transacciones al servidor de reserva. Ahora, cuando el servidor de reserva pierda la conexión, el servidor principal conservará esos archivos WAL.

Ranuras de replicación lógica de PostgreSQL
La replicación lógica se introdujo en PostgreSQL 10. La replicación lógica solo incorpora los cambios similares a los de SQL. No funciona sin ranuras de replicación. Los datos de replicación lógica deben decodificarse mediante un complemento .

Hevo se encarga de configurar WAL para la replicación lógica de su canalización. Los pasos para ello se pueden encontrar en esta documentación .


/************* comandos usados *************\

nohup : En resumen, nohup permite que un proceso continúe ejecutándose incluso después de cerrar la terminal o salir de la sesión, lo que es útil para evitar que los procesos se detengan accidentalmente
pg_basebackup :  copia de seguridad de un clúster de bases de datos PostgreSQL en ejecución, Proporcito : copias de backup sin afectar a otros clientes ,  recuperación en un punto específico en el tiempo,  iniciar un servidor de réplica mediante log-shipping o replicación en streaming,  Requisitos :  permisos de REPLICACIÓN o sea un superusuario. 
	-U postgres: Especifica el nombre de usuario (postgres) para conectarse al servidor PostgreSQL.
	-h 10.49.123.199: Indica la dirección IP o el nombre de host del servidor PostgreSQL al que se conectará.
	-R: Señala que la copia de seguridad está destinada a la replicación (para un servidor de réplica).
	-P: Muestra información de progreso durante la copia de seguridad.
	-X stream: Utiliza la replicación en streaming como método de copia de seguridad.
	-c fast: Configura la velocidad de conexión como rápida.
	-D /sysx/data/: Especifica el directorio de destino donde se almacenarán los archivos de copia de seguridad.


pg_stat_progress_basebackup:  esta vista te informará sobre el progreso de la copia de seguridad mientras pg_basebackup está en curso. 
full_page_writes= on 



hot_standby: OFF =PRINCIPAL | ON  =SOPORTE 


ps aux | grep walreceiver

ps aux | grep walsender
ps -ef | grep stream 






#################################### BIBLIOGRAFIAS ####################################
https://docs.google.com/document/d/1dhRb2ZCVfBXCU9HAfG-1NfK4IXQUJFeL/edit




******* Rango de 1-10 dependiendo de lo bueno que es la documentacion



https://es.linux-console.net/?p=322#gsc.tab=0 ---- 10 
https://hevodata.com/learn/postgresql-streaming-replication/ --- 10
https://gist.github.com/encoreshao/cf919b300497ca863d54383455578906 ----- 10
https://gist.github.com/kpirliyev/c840e32df1619ab5875911286521c75b --- 9
https://gist.github.com/hiren-serpentcs/e23137b06b67a50c5774be76b9247390 ---- 8
https://gist.github.com/farhad0085/391258c40ff86da093945db63a48badf ----- 7
https://gist.github.com/cristianrasch/4f08b914088b5bc99c2d6466749acaa9 ---- 7
https://gist.github.com/tcpipuk/f68fb199ea8b1c1bdf48833fde86b418 --- docker replication califi 6
https://gist.github.com/vvitad/4157ab5928b751b89fc6cd63aed3c4a7 ----- calificacion 5
https://gist.github.com/anilpratti/434bcefaa9f10ca1d99b8bcd20bcb145 --- 3 


https://gist.github.com/dolezel/050f26769ec4c03f0ad075c7be2b3bc9 --- script 



https://momjian.us/main/writings/pgsql/hot_streaming_rep.pdf
https://www.postgresql.eu/events/pgconfeu2023/sessions/session/4773/slides/427/A%20journey%20into%20postgresql%20logical%20replication.pdf
https://p2d2.cz/files/PostgreSQL_LogicalReplication_LessonsLearned_v08.pdf
https://kinsta.com/blog/postgresql-replication/


https://emiliopm.com/2014/03/replicacion-en-postgresql/
https://e-mc2.net/blog/hot-standby-y-streaming-replication/#:~:text=Ficheros%20WAL%3A%20PostgreSQL%20utiliza%20los,en%20la%20base%20de%20datos.


What is WAL - https://www.postgresql.org/docs/13.0/wal-intro.html
Streaming Replication - https://www.postgresql.org/docs/13/warm-standby.html#STREAMING-REPLICATION
Replication Slots - https://hevodata.com/learn/postgresql-replication-slots/










################################### COSAS EXTRAS  ###################################


-- herramienta para ver que es lo que contiene los wall 
pg_waldump /var/lib/pgsql/data/pg_wal/0000000100000002000000C9

--save-fullpage

\watch 1


SELECT pid, usename, application_name, state
, pg_current_wal_lsn() AS current_lsn
, sent_lsn
, pg_size_pretty(pg_wal_lsn_diff(pg_current_wal_lsn(), sent_lsn)) AS sent_diff
, write_lsn
, pg_size_pretty(pg_wal_lsn_diff(pg_current_wal_lsn(), write_lsn)) AS write_diff
, replay_lsn
, pg_size_pretty(pg_wal_lsn_diff(pg_current_wal_lsn(), replay_lsn)) AS replay_diff
, write_lag, flush_lag, replay_lag
FROM pg_stat_replication
ORDER BY application_name, pid;




SELECT pg_start_backup(’label’);
5. Perform file system-level backup (can be inconsistent)
6. SELECT pg_stop_backup();




 cat  /etc/passwd  | grep postgres
postgres:x:1001:1001::/home/postgres:/bin/bash


 El archivo `recovery.conf` en versiones anteriores de PostgreSQL se utilizaba para configurar la recuperación de bases de datos a partir de una copia de seguridad base. En él, se especificaban parámetros importantes como `restore_command` y `recovery_target_time` o `recovery_target_name`¹. Sin embargo, a partir de PostgreSQL 12, este archivo ha sido reemplazado por el archivo `recovery.signal`. Aquí están las diferencias clave:




1. **`recovery.signal`**:
    - Es un archivo vacío que indica al servidor PostgreSQL que debe iniciar una recuperación.
    - Se crea al inicio de la recuperación y se elimina automáticamente al finalizar.
    - Cumple la función de bandera para activar el modo de recuperación.

2. **`postgresql.conf`**:
    - Ahora contiene los parámetros de recuperación.
    - Configura opciones como `restore_command`, `recovery_target`, y más.
    - Los cambios se realizan en este archivo, no en `recovery.conf`.

 
Tareas de administración y mantenimiento
Una vez que todo está funcionando, tendremos que mantener el sistema y administrarlo en caso de fallo del servidor maestro. Las tareas que tendremos que implementar/realizar serán:

Limpiar el directorio donde se archivan los ficheros WAL en el servidor maestro, borrando los ficheros WAL antiguos que no se necesiten.
Limpiar el directorio a donde se transfieren los ficheros WAL en el servidor esclavo, borrando los ficheros WAL antiguos que no se necesiten.
Activar automáticamente el servidor esclavo como nuevo servidor maestro en caso de fallo del servidor maestro en uso.
Monitorizar el estado de la replicación para saber el retraso del servidor esclavo en relación al maestro



pg_basebackup -h 192.168.33.33 -D /var/lib/postgresql/12/main/ -U replicator -P -v  -R -X stream -C -S pgstandby1
pg_basebackup -h [primary IP]  -D [postgres_data_directory] -U repluser -v -P -R -X stream -c fast

 
 




SELECT CASE WHEN pg_last_wal_receive_lsn() = pg_last_wal_replay_lsn()
       THEN 0
       ELSE EXTRACT (EPOCH FROM now() - pg_last_xact_replay_timestamp())
       END AS log_delay;




primary_conninfo = 'user=replicator password=123 host=192.168.33.33 port=5432 sslmode=prefer sslcompression=0 gssencmode=prefer krbsrvname=postgres target_session_attrs=any'
primary_conninfo = 'user=sysreplica password=123123 channel_binding=prefer host=10.28.230.123 port=5416 sslmode=prefer sslcompression=0 sslcertmode=allow sslsni=1 ssl_min_protocol_version=TLSv1.2 gssencmode=prefer krbsrvname=postgres gssdelegation=0 target_session_attrs=any load_balance_hosts=disable'



 
 ----- monitoreo 
 tail -f  nohup.out
 

select * from pg_settings where name = 'primary_conninfo';
SELECT * FROM pg_replication_slots;
select * from pg_stat_activity 
select * from pg_stat_progress_basebackup;
SELECT * FROM pg_stat_wal_receiver; --- comando para ver lo que se recibe y saber cual es el servidor principal
SELECT * FROM pg_stat_replication;  --- comando para ver en el serv principal las ip serv soporte y ver la columna sync_state  puede tener el valor  async  y sync


SELECT * FROM pg_stat_subscription;


       SELECT pg_last_wal_receive_lsn();
       SELECT pg_last_wal_replay_lsn();

=/home/postgres/.pgpass




select specific_schema, routine_name  from  information_schema.routines  where routine_name ilike '%repli%';
| pg_catalog      | pg_get_replica_identity_index          |
| pg_catalog      | pg_stat_get_replication_slot           |
| pg_catalog      | pg_stat_reset_replication_slot         |
| pg_catalog      | pg_copy_physical_replication_slot      |
| pg_catalog      | pg_copy_physical_replication_slot      |
| pg_catalog      | pg_drop_replication_slot               |
| pg_catalog      | pg_get_replication_slots               |
| pg_catalog      | pg_copy_logical_replication_slot       |
| pg_catalog      | pg_copy_logical_replication_slot       |
| pg_catalog      | pg_copy_logical_replication_slot       |
| pg_catalog      | pg_replication_slot_advance            |
| pg_catalog      | pg_replication_origin_drop             |
| pg_catalog      | pg_replication_origin_oid              |
| pg_catalog      | pg_replication_origin_progress         |
| pg_catalog      | pg_replication_origin_session_is_setup |
| pg_catalog      | pg_replication_origin_session_progress |
| pg_catalog      | pg_replication_origin_session_setup    |
| pg_catalog      | pg_replication_origin_xact_reset       |
| pg_catalog      | pg_replication_origin_xact_setup       |
| pg_catalog      | pg_create_logical_replication_slot     |
| pg_catalog      | pg_replication_origin_advance          |
| pg_catalog      | pg_replication_origin_create           |
| pg_catalog      | pg_replication_origin_session_reset    |
| pg_catalog      | pg_show_replication_origin_status      |
| pg_catalog      | pg_create_physical_replication_slot    


select specific_schema, routine_name  from  information_schema.routines  where routine_name ilike '%wal%';
| pg_catalog      | pg_stat_get_wal_senders       |
| pg_catalog      | pg_stat_get_wal_receiver      |
| pg_catalog      | pg_stat_get_wal               |
| pg_catalog      | pg_current_wal_lsn            |
| pg_catalog      | pg_current_wal_insert_lsn     |
| pg_catalog      | pg_current_wal_flush_lsn      |
| pg_catalog      | pg_walfile_name_offset        |
| pg_catalog      | pg_walfile_name               |
| pg_catalog      | pg_split_walfile_name         |
| pg_catalog      | pg_wal_lsn_diff               |
| pg_catalog      | pg_last_wal_receive_lsn       |
| pg_catalog      | pg_last_wal_replay_lsn        |
| pg_catalog      | pg_is_wal_replay_paused       |
| pg_catalog      | pg_get_wal_replay_pause_state |
| pg_catalog      | pg_get_wal_resource_managers  |
| pg_catalog      | pg_switch_wal                 |
| pg_catalog      | pg_wal_replay_pause           |
| pg_catalog      | pg_wal_replay_resume          |
| pg_catalog      | pg_ls_waldir                  |


 select specific_schema, routine_name  from  information_schema.routines  where routine_name ilike '%backup%';
| pg_catalog      | pg_backup_start |
| pg_catalog      | pg_backup_stop  |




ERROR:  cannot execute DROP ROLE in a read-only transaction
Time: 0.352 ms

---------------- EXTENSIONES Y HERRAMIENTAS UTILES
 
Pgpool-II es una herramienta que administra un grupo de servidores PostgreSQL para lograr alta disponibilidad, equilibrio de carga, agrupación de conexiones y otras características
repmgr es una herramienta de código abierto diseñada para administrar la replicación y el failover en un grupo de servidores PostgreSQL



[postgres@CDPLR8BDPSDBA02 ~]$ pg_basebackup -?
  -D, --pgdata=DIRECTORY receive base backup into directory
  -F, --format=p|t       output format (plain (default), tar)
  -r, --max-rate=RATE    maximum transfer rate to transfer data directory
                         (in kB/s, or use suffix "k" or "M")
  -R, --write-recovery-conf
                         write configuration for replication
  -t, --target=TARGET[:DETAIL]
                         backup target (if other than client)
  -T, --tablespace-mapping=OLDDIR=NEWDIR
                         relocate tablespace in OLDDIR to NEWDIR
      --waldir=WALDIR    location for the write-ahead log directory
  -X, --wal-method=none|fetch|stream
                         include required WAL files with specified method
  -z, --gzip             compress tar output
  -Z, --compress=[{client|server}-]METHOD[:DETAIL]
                         compress on client or server as specified
  -Z, --compress=none    do not compress tar output

General options:
  -c, --checkpoint=fast|spread
                         set fast or spread checkpointing
  -C, --create-slot      create replication slot
  -l, --label=LABEL      set backup label
  -n, --no-clean         do not clean up after errors
  -N, --no-sync          do not wait for changes to be written safely to disk
  -P, --progress         show progress information
  -S, --slot=SLOTNAME    replication slot to use
  -v, --verbose          output verbose messages
  -V, --version          output version information, then exit
      --manifest-checksums=SHA{224,256,384,512}|CRC32C|NONE
                         use algorithm for manifest checksums
      --manifest-force-encode
                         hex encode all file names in manifest
      --no-estimate-size do not estimate backup size in server side
      --no-manifest      suppress generation of backup manifest
      --no-slot          prevent creation of temporary replication slot
      --no-verify-checksums
                         do not verify checksums
  -?, --help             show this help, then exit

Connection options:
  -d, --dbname=CONNSTR   connection string
  -h, --host=HOSTNAME    database server host or socket directory
  -p, --port=PORT        database server port number
  -s, --status-interval=INTERVAL
                         time between status packets sent to server (in seconds)
  -U, --username=NAME    connect as specified database user
  -w, --no-password      never prompt for password
  -W, --password         force password prompt (should happen automatically)
  
  
  
  
  
  
  
  
  ---------------------------
  
  https://www.postgresql.fastware.com/blog/two-phase-commits-for-logical-replication-publications-subscriptions
  
  La **replicación en streaming** y la **replicación lógica** en PostgreSQL tienen objetivos y mecanismos diferentes. Aquí te explico las diferencias clave:

### **Replicación en Streaming**
- **Objetivo**: Mantener una copia exacta de la base de datos principal (primaria) en una o más bases de datos secundarias (réplicas).
- **Funcionamiento**: Utiliza los archivos de registro de escritura adelantada (WAL) para enviar cambios en tiempo real desde la base de datos primaria a las réplicas.
- **Tipos**:
  - **Asíncrona**: El commit en la base de datos primaria no espera a que las réplicas reciban los registros WAL.
  - **Síncrona**: El commit en la base de datos primaria espera a que todas las réplicas reciban los registros WAL antes de confirmar la transacción¹.
- **Ventajas**: Baja latencia en la replicación y alta disponibilidad.
- **Desventajas**: Si la red falla, las réplicas pueden desincronizarse y requerir una reconfiguración completa².

### **Replicación Lógica**
- **Objetivo**: Permitir la replicación de datos específicos (como tablas seleccionadas) en lugar de toda la base de datos.
- **Funcionamiento**: Utiliza publicaciones y suscripciones para replicar cambios a nivel de tabla. Los cambios se envían en formato lógico, lo que permite transformaciones y filtrado de datos.
- **Ventajas**: Flexibilidad para replicar solo partes de la base de datos y realizar transformaciones de datos durante la replicación.
- **Desventajas**: Puede ser más compleja de configurar y gestionar en comparación con la replicación en streaming³.

### **Resumen**
- **Replicación en Streaming**: Ideal para mantener una copia exacta y en tiempo real de toda la base de datos.
- **Replicación Lógica**: Ideal para replicar datos específicos y aplicar transformaciones durante la replicación.

 -----------------------
 
 
 En PostgreSQL, al configurar una **replicación por streaming**, no es estrictamente necesario habilitar un "replication slot" para que la replicación funcione. Sin embargo, utilizar un replication slot tiene sus ventajas y desventajas. Aquí te explico cómo funciona y cuáles son los pros y contras de usar replication slots.

### **¿Qué es un Replication Slot?**

Un **replication slot** es un mecanismo en PostgreSQL que asegura que los registros WAL (Write-Ahead Log) necesarios para la replicación de un nodo secundario específico no se eliminen del servidor primario hasta que dicho nodo los haya recibido y procesado. Básicamente, un replication slot actúa como un marcador que garantiza que el flujo de datos se mantenga consistente entre el servidor primario y sus réplicas.

### **Streaming Replication Sin Slot**

Cuando configuras la replicación por streaming **sin un replication slot**, el servidor primario envía los registros WAL al secundario, pero no garantiza que estos registros se mantengan disponibles indefinidamente. Los WAL pueden eliminarse del primario tan pronto como se consideren innecesarios para la recuperación en caso de un fallo, lo que podría generar problemas si la réplica no logra procesar los WAL a tiempo.

### **Pros y Contras de Usar Replication Slots**

#### **Pros:**

1. **Garantía de Consistencia:**
   - Los replication slots garantizan que el servidor primario no eliminará los registros WAL que aún no hayan sido aplicados por la réplica. Esto previene que las réplicas se queden atrás o se desincronicen si, por alguna razón, no pueden procesar los registros WAL rápidamente (por ejemplo, debido a una carga alta o un problema de red).

2. **Simplificación del Mantenimiento:**
   - Al usar replication slots, no necesitas preocuparte tanto por mantener o monitorear archivos WAL antiguos en el servidor primario. Los slots se encargan automáticamente de que los WAL necesarios permanezcan disponibles.

3. **Facilita la Recuperación:**
   - En caso de que una réplica quede fuera de línea durante un tiempo, el slot asegura que los WAL necesarios aún estarán disponibles cuando la réplica vuelva a estar en línea, lo que facilita su recuperación sin necesidad de reiniciar la replicación completa.

4. **Manejo Automatizado:**
   - Es útil en entornos donde la automatización es clave, ya que los slots pueden ayudar a administrar la replicación sin intervención manual constante.

#### **Contras:**

1. **Acumulación de WAL:**
   - Si una réplica queda fuera de línea por un período prolongado y está utilizando un replication slot, los archivos WAL comenzarán a acumularse en el servidor primario. Esto puede llenar el almacenamiento disponible si no se maneja adecuadamente, lo que podría afectar el rendimiento del servidor o incluso detenerlo si se queda sin espacio.

2. **Requiere Monitoreo Activo:**
   - Es crucial monitorear la replicación para asegurarse de que los WAL no se acumulen en exceso. Si una réplica se queda atrás durante mucho tiempo, podría ser necesario liberar el slot o realizar mantenimiento manual.

3. **Uso de Recursos:**
   - Mantener replication slots activos puede consumir recursos adicionales en el servidor primario, ya que debe administrar la retención de WAL y garantizar la entrega a las réplicas.

4. **Complejidad Adicional:**
   - La administración de replication slots puede agregar una capa adicional de complejidad a la configuración y mantenimiento del sistema. En entornos donde la simplicidad es clave, esto puede ser un factor en contra.

### **Streaming Replication Sin Slot:**

En muchas situaciones, puedes operar una replicación por streaming sin usar replication slots, especialmente si tienes una red estable y las réplicas están configuradas para mantenerse relativamente cerca del primario en términos de sincronización.

- **Pros:**
  - **Simplicidad:** Menor complejidad en la configuración y menos componentes a monitorear.
  - **Menor Uso de Espacio:** No hay riesgo de acumulación de WAL en el primario debido a réplicas atrasadas.
  - **Menos Dependencias:** No dependes de la disponibilidad de slots, lo que puede simplificar la gestión en ciertos entornos.

- **Contras:**
  - **Riesgo de Desincronización:** Si una réplica se queda atrás y los WAL necesarios son eliminados, tendrás que reiniciar la replicación desde cero, lo cual puede ser costoso en términos de tiempo y recursos.
  - **Mayor Mantenimiento Manual:** Tendrás que estar más atento para asegurarte de que las réplicas no se desincronicen, especialmente en situaciones de alta carga o redes inestables.

### **Conclusión**

- **Usar Replication Slots** es recomendable en entornos donde necesitas garantizar la consistencia de la replicación y no quieres correr el riesgo de que una réplica se desincronice debido a la eliminación de registros WAL necesarios. Es particularmente útil en sistemas críticos donde la pérdida de datos o la necesidad de reiniciar la replicación desde cero no es una opción.

- **No Usar Replication Slots** puede ser adecuado en entornos donde la replicación es relativamente simple y estable, o en sistemas donde el espacio en disco es limitado y no se quiere correr el riesgo de acumulación excesiva de WAL. 

Tu elección dependerá de tus necesidades específicas, la criticidad de los datos y la infraestructura disponible.












------------------------


¡Claro! Los términos "activo-activo" y "activo-pasivo" se refieren a configuraciones de alta disponibilidad en sistemas de bases de datos como PostgreSQL.

### Activo-Activo
En una configuración **activo-activo**, múltiples nodos (servidores) están activos y manejan solicitudes al mismo tiempo. Esto significa que el tráfico y la carga de trabajo se distribuyen equitativamente entre todos los nodos¹. Las ventajas incluyen:

- **Balanceo de carga**: La carga de trabajo se reparte entre varios nodos, lo que mejora el rendimiento.
- **Alta disponibilidad**: Si un nodo falla, otros nodos continúan manejando las solicitudes sin interrupción.
- **Escalabilidad**: Se pueden agregar más nodos para manejar un mayor volumen de tráfico.

### Activo-Pasivo
En una configuración **activo-pasivo**, solo un nodo está activo y maneja todas las solicitudes, mientras que uno o más nodos están en espera (pasivos). Los nodos pasivos solo se activan si el nodo activo falla². Las características incluyen:

- **Simplicidad**: Más fácil de configurar y mantener en comparación con activo-activo.
- **Respaldo**: El nodo pasivo actúa como respaldo y se activa solo en caso de fallo del nodo activo, lo que puede introducir un pequeño retraso durante la conmutación.

Ambas configuraciones tienen sus propias ventajas y se eligen según las necesidades específicas de disponibilidad y rendimiento del sistema.

 
 
 
 
 
 
 
 
 ----------------
 
 
 ### Factores clave de la replicación en PostgreSQL

1. **Alta disponibilidad**:
   - La replicación permite que una base de datos esté disponible incluso si el servidor principal falla. Los datos se copian a uno o más servidores de réplica, que pueden asumir el rol del servidor principal en caso de fallo.

2. **Redundancia de datos**:
   - Mantener copias de los datos en múltiples ubicaciones asegura que no se pierdan datos en caso de fallos del hardware o del software.

3. **Balanceo de carga**:
   - Las réplicas pueden ser utilizadas para distribuir la carga de trabajo, permitiendo que las consultas de solo lectura se ejecuten en los servidores de réplica, aliviando la carga del servidor principal.

4. **Recuperación ante desastres**:
   - En caso de un desastre, las réplicas pueden ser utilizadas para restaurar rápidamente los datos y minimizar el tiempo de inactividad.

### Tipos de replicación en PostgreSQL

1. **Replicación basada en WAL (Write-Ahead Logging)**:
   - **WAL Shipping**: Los archivos WAL se copian periódicamente del servidor principal a los servidores de réplica.
   - **Streaming Replication**: Los cambios se envían en tiempo real desde el servidor principal a los servidores de réplica mediante una conexión persistente².

2. **Replicación lógica**:
   - Permite replicar cambios específicos de tablas seleccionadas y puede ser utilizada para replicar datos entre diferentes versiones de PostgreSQL o para consolidar datos de múltiples bases de datos en una sola³.

3. **Replicación síncrona y asíncrona**:
   - **Síncrona**: El servidor principal espera la confirmación de que los datos han sido escritos en al menos una réplica antes de confirmar la transacción. Esto asegura que no se pierdan datos en caso de fallo, pero puede introducir latencia.
   - **Asíncrona**: El servidor principal no espera la confirmación de las réplicas antes de confirmar la transacción. Esto mejora el rendimiento, pero puede resultar en pérdida de datos en caso de fallo².

### Herramientas y técnicas adicionales

1. **pgpool-II**:
   - Una herramienta que proporciona balanceo de carga, replicación y conmutación por error para PostgreSQL.

2. **Slony-I**:
   - Un sistema de replicación maestro-esclavo para PostgreSQL que permite replicar datos entre múltiples servidores.

3. **Bucardo**:
   - Una herramienta de replicación multi-maestro que permite la replicación bidireccional entre múltiples servidores PostgreSQL⁴.
 
 
 
### 1. Replicación Física (Physical Replication)
Esta replicación se basa en la copia de los archivos de datos binarios (WAL - Write-Ahead Logging) del servidor principal a los servidores de réplica.

- **WAL Shipping**: Los archivos WAL se copian periódicamente del servidor principal a los servidores de réplica.
- **Streaming Replication**: Los cambios se envían en tiempo real desde el servidor principal a los servidores de réplica mediante una conexión persistente⁵.

### 2. Replicación Lógica (Logical Replication)
Esta replicación permite replicar cambios específicos de tablas seleccionadas y puede ser utilizada para replicar datos entre diferentes versiones de PostgreSQL o para consolidar datos de múltiples bases de datos en una sola.

- **Publicaciones y Suscripciones**: Los datos se replican mediante la creación de publicaciones en el servidor principal y suscripciones en los servidores de réplica⁷.

### Comparación de Replicación Física y Lógica

- **Replicación Física**:
  - **Ventajas**: Alta eficiencia, replicación completa del servidor, adecuada para alta disponibilidad y recuperación ante desastres.
  - **Desventajas**: No permite replicar solo partes específicas de la base de datos, requiere que las versiones de PostgreSQL sean las mismas.

- **Replicación Lógica**:
  - **Ventajas**: Flexibilidad para replicar solo tablas específicas, permite replicar entre diferentes versiones de PostgreSQL.
  - **Desventajas**: Puede ser menos eficiente que la replicación física, más compleja de configurar.

### Herramientas de Monitoreo y Gestión de Replicación

Para monitorear y gestionar la replicación en PostgreSQL, puedes usar herramientas como:

- **pg_stat_replication**: Vista interna de PostgreSQL que muestra el estado de las conexiones de replicación.
- **pgpool-II**: Proporciona balanceo de carga, replicación y conmutación por error.
- **Bucardo postgresql**: Herramienta de replicación multi-maestro.
- **Slony-I**: Sistema de replicación maestro-esclavo.
 
